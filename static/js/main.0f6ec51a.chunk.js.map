{"version":3,"sources":["components/ConvertForm.js","components/ConvertStatus.js","components/ConvertInput.js","components/StatusContext.js","components/App.js","index.js"],"names":["WrappedComponent","ConvertStatus","value","context","className","ConvertInput","handleTemperature","event","target","props","updateTemperature","convertTo","this","temperature","type","name","onChange","bind","Component","StatusContext","React","createContext","StatusProvider","Provider","StatusConsumer","Consumer","WrapperComponent","ConvertForm","celsius","fahrenheit","App","state","getFahrenheit","c","parseInt","f","getCelsius","setState","returnValue","convertTemperature","ReactDOM","render","document","querySelector"],"mappings":"6KAKmBA,E,mECqBJC,EAvBO,SAAC,GAAiB,IAClBC,EADGC,EAAc,EAAdA,QAoBrB,OAAO,sBAAKC,UAAU,SAAf,sBAnBWF,EAmBgCC,EAlB1CD,EAAQ,GACD,WACAA,EAAQ,GACR,MACAA,EAAQ,GACR,OACAA,EAAQ,EACR,OACAA,GAAS,GACT,OACAA,IAAU,GACV,YAGJ,UCAAG,E,4MAhBXC,kBAAoB,SAAAC,GAAU,IAClBL,EAAUK,EAAMC,OAAhBN,MAER,EAAKO,MAAMC,kBAAkB,EAAKD,MAAME,UAAWT,I,uDAGa,IAAD,yDAAZU,KAAKH,MAAnDE,EAA0D,EAA1DA,UAAWE,EAA+C,EAA/CA,YAA+C,EAAlCH,kBAC7B,OACI,kCACI,+BAAqB,YAAdC,EAA0B,eAAiB,cAClD,uBAAOG,KAAK,SAASC,KAAK,cAAcb,MAAOW,EAAaG,SAAUJ,KAAKN,kBAAkBW,KAAKL,e,GAXvFM,aCArBC,EAAgBC,IAAMC,cAAc,IAE7BC,EAAiBH,EAAcI,SAC/BC,EAAiBL,EAAcM,SHMtCC,GANa1B,EAMiBC,EALzB,WACH,OAAO,cAACuB,EAAD,UAAiB,SAAAf,GAAK,OAAI,cAACT,EAAD,CAAkBG,QAASM,SA0BrDkB,EApBK,SAAC,GAAwC,IAAtCd,EAAqC,EAArCA,YAAaH,EAAwB,EAAxBA,kBAChC,OACI,gCACI,gCACI,8BACI,cAAC,EAAD,CAAcG,YAAaA,EAAYe,QAASlB,kBAAmBA,MAEvE,8BACI,cAAC,EAAD,CACIG,YAAaA,EAAYgB,WACzBlB,UAAU,UACVD,kBAAmBA,SAI/B,cAACgB,EAAD,QIkCGI,G,wDAvDX,WAAYrB,GAAQ,IAAD,6BACf,cAAMA,IAIDsB,MAAQ,CACTH,QAHmB,GAInBC,WAAY,EAAKG,cAJE,KAHR,E,0DAWLC,GACV,OAAOC,SAAc,EAAJD,EAAS,EAAI,M,iCAGvBE,GACP,OAAOD,SAAqB,GAAVC,EAAI,IAAW,K,yCAGlBxB,EAAWT,GAC1B,MAAqB,YAAdS,EACD,CAAEiB,QAAShB,KAAKwB,WAAWlC,GAAQ2B,WAAYK,SAAShC,IACxD,CAAE0B,QAASM,SAAShC,GAAQ2B,WAAYjB,KAAKoB,cAAc9B,M,wCAGnDS,GAAuB,IAAD,OAAXT,EAAW,uDAAH,EACjCU,KAAKyB,UAAS,WACV,GAAc,KAAVnC,GAA0B,MAAVA,EAAe,CAC/B,IAAMoC,EAAwB,MAAVpC,EAAgB,IAAM,GAE1C,MAAO,CACH0B,QAASU,EACTT,WAAYS,GAIpB,OAAO,EAAKC,mBAAmB5B,EAAWT,Q,+BAK9C,OACI,sBAAKE,UAAU,YAAf,UACI,uDACA,cAACkB,EAAD,CAAgBpB,MAAOU,KAAKmB,MAAMH,QAAlC,SACI,cAAC,EAAD,CACIf,YAAaD,KAAKmB,MAClBrB,kBAAmBE,KAAKF,kBAAkBO,KAAKL,iB,GAhDrDM,cCFlBsB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.0f6ec51a.chunk.js","sourcesContent":["import React from 'react';\nimport ConvertStatus from './ConvertStatus';\nimport ConvertInput from './ConvertInput';\nimport { StatusConsumer } from './StatusContext';\n\nconst withStatus = WrappedComponent => {\n    return () => {\n        return <StatusConsumer>{props => <WrappedComponent context={props} />}</StatusConsumer>;\n    };\n};\n\nconst WrapperComponent = withStatus(ConvertStatus);\n\nconst ConvertForm = ({ temperature, updateTemperature }) => {\n    return (\n        <div>\n            <div>\n                <div>\n                    <ConvertInput temperature={temperature.celsius} updateTemperature={updateTemperature} />\n                </div>\n                <div>\n                    <ConvertInput\n                        temperature={temperature.fahrenheit}\n                        convertTo=\"celsius\"\n                        updateTemperature={updateTemperature}\n                    />\n                </div>\n            </div>\n            <WrapperComponent />\n        </div>\n    );\n};\n\nexport default ConvertForm;","import React from 'react';\n// import { StatusConsumer } from './StatusContext';\n\nconst ConvertStatus = ({ context }) => {\n    const getStatus = value => {\n        if (value > 50) {\n            return 'Very hot';\n        } else if (value > 30) {\n            return 'Hot';\n        } else if (value > 15) {\n            return 'Warm';\n        } else if (value > 0) {\n            return 'Cool';\n        } else if (value > -10) {\n            return 'Cold';\n        } else if (value <= -10) {\n            return 'Very cold';\n        }\n\n        return null;\n    };\n\n    // return <StatusConsumer>{props => <div className=\"status\">Status: {getStatus(props)}</div>}</StatusConsumer>;\n    return <div className=\"status\">Status: {getStatus(context)}</div>;\n};\n\nexport default ConvertStatus;","import React, { Component } from 'react';\n\nclass ConvertInput extends Component {\n    handleTemperature = event => {\n        const { value } = event.target;\n\n        this.props.updateTemperature(this.props.convertTo, value);\n    };\n\n    render({ convertTo, temperature, updateTemperature } = this.props) {\n        return (\n            <label>\n                <span>{convertTo === 'celsius' ? 'Fahrenheit: ' : 'Celsius: '}</span>\n                <input type=\"number\" name=\"temperature\" value={temperature} onChange={this.handleTemperature.bind(this)} />\n            </label>\n        );\n    }\n}\n\nexport default ConvertInput;","import React from 'react';\n\nconst StatusContext = React.createContext({});\n\nexport const StatusProvider = StatusContext.Provider;\nexport const StatusConsumer = StatusContext.Consumer;\n\nexport default StatusContext;","\nimport React, { Component } from 'react';\nimport ConvertForm from './ConvertForm';\nimport { StatusProvider } from './StatusContext';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        const defaultCelsius = 20;\n\n        this.state = {\n            celsius: defaultCelsius,\n            fahrenheit: this.getFahrenheit(defaultCelsius)\n        };\n    }\n\n    getFahrenheit(c) {\n        return parseInt((c * 9) / 5 + 32);\n    }\n\n    getCelsius(f) {\n        return parseInt(((f - 32) * 5) / 9);\n    }\n\n    convertTemperature(convertTo, value) {\n        return convertTo === 'celsius'\n            ? { celsius: this.getCelsius(value), fahrenheit: parseInt(value) }\n            : { celsius: parseInt(value), fahrenheit: this.getFahrenheit(value) };\n    }\n\n    updateTemperature(convertTo, value = 0) {\n        this.setState(() => {\n            if (value === '' || value === '-') {\n                const returnValue = value === '-' ? '-' : '';\n\n                return {\n                    celsius: returnValue,\n                    fahrenheit: returnValue\n                };\n            }\n\n            return this.convertTemperature(convertTo, value);\n        });\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <h1>Temperature Converter</h1>\n                <StatusProvider value={this.state.celsius}>\n                    <ConvertForm\n                        temperature={this.state}\n                        updateTemperature={this.updateTemperature.bind(this)}\n                    />\n                </StatusProvider>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}